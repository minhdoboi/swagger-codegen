{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{{#models}}
{{#model}}
{{#vendorExtensions.x-hasKeywords}}
{-# LANGUAGE TemplateHaskell #-}
{{/vendorExtensions.x-hasKeywords}}

module {{package}}.{{classname}} where
{{/model}}
{{/models}}

import qualified Data.Aeson
import GHC.Generics
{{#imports}}import {{import}}
{{/imports}}
{{#models}}
{{#model}}
{{#vendorExtensions.x-hasKeywords}}
import Data.Aeson.TH (deriveJSON, defaultOptions, fieldLabelModifier)
{{/vendorExtensions.x-hasKeywords}}

-- | {{& description}}
data {{classname}} = {{classname}}
    { {{#vars}}{{& name}} :: {{^required}}Maybe {{/required}}{{datatype}} -- ^ {{& description}} {{#hasMore}}
    , {{/hasMore}}{{/vars}}
    } deriving (Show, Eq, Generic)

{{#vendorExtensions.x-hasKeywords}}
$(deriveJSON defaultOptions{fieldLabelModifier = (\n -> if Prelude.last n == '_' then Prelude.take ((Prelude.length n) - 1 ) n else n)} ''{{classname}})
{{/vendorExtensions.x-hasKeywords}}
{{^vendorExtensions.x-hasKeywords}}
instance Data.Aeson.FromJSON {{classname}}
instance Data.Aeson.ToJSON {{classname}}
{{/vendorExtensions.x-hasKeywords}}
{{/model}}
{{/models}}
